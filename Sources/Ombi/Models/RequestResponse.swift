// Ombi
// RequestResponse.swift
//
// MIT License
//
// Copyright (c) 2021 Varun Santhanam
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the  Software), to deal
//
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED  AS IS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import Foundation

/// A network response generated by a `Requestable`
public struct RequestResponse<Body> {

    // MARK: - Factories

    public static var empty: Self { .init(url: nil, headers: nil, statusCode: nil, body: nil) }

    // MARK: - Initializers

    /// Create a `RequestResponse`
    /// - Parameters:
    ///   - url: The URL that generated the response
    ///   - headers: The response headers
    ///   - statusCode: The response status code
    ///   - body: The response body
    public init(url: URL?,
                headers: RequestHeaders?,
                statusCode: Int?,
                body: Body?) {
        self.url = url
        self.headers = headers
        self.statusCode = statusCode
        self.body = body
    }

    // MARK: - API

    /// The URL that generated the response
    public var url: URL?

    /// The response headers
    public var headers: RequestHeaders?

    /// The response status code
    public var statusCode: Int?

    /// The response
    public var body: Body?

    // MARK: - Subscripting

    subscript(header: RequestHeaders.Key) -> RequestHeaders.Value? {
        get {
            headers?[header]
        }
        set {
            if headers == nil {
                headers = [:]
            }
            headers?[header] = newValue
        }
    }
}

extension RequestResponse: Equatable where Body: Equatable {

    public static func == (lhs: RequestResponse<Body>, rhs: RequestResponse<Body>) -> Bool {
        lhs.statusCode == rhs.statusCode && lhs.headers == rhs.headers && lhs.url == rhs.url && lhs.body == rhs.body
    }

}

extension RequestResponse: Hashable where Body: Hashable {

    public func hash(into hasher: inout Hasher) {
        hasher.combine(statusCode)
        hasher.combine(headers)
        hasher.combine(url)
        hasher.combine(body)
    }

}
