//
//  File.swift
//  
//
//  Created by Varun Santhanam on 5/8/21.
//

import Foundation
import Combine

/// A protocol for requests
public protocol Requestable {
    
    /// The body type to be sent with this request
    associatedtype RequestBody
    
    /// The body type to expect from the response
    associatedtype ResponseBody
    
    /// Error generated by a response
    associatedtype ResponseError: Error
    
    /// The specialized response to be returned by this request
    typealias Response = RequestResponse<ResponseBody>
    
    /// The specialized error to be generated by this request
    typealias Failure = RequestError<ResponseError>
    
    /// The path to request
    var path: String { get }
    
    /// The URL query to request
    var query: [String : String] { get }
    
    /// The HTTP method to use
    var method: RequestMethod { get }
    
    /// The HTTP headers to send
    var headers: RequestHeaders { get }
    
    /// The body to append to the request
    var body: RequestBody? { get }
    
    /// The response to use if the request fails
    var fallbackResponse: Response? { get }
    
    /// Encoder used to encode `RequestBody` into `Data`
    var requestEncoder: BodyEncoder<RequestBody> { get }
    
    /// Decoder used to decode `Data` into `ResponseBody`
    var responseDecoder: BodyDecoder<ResponseBody> { get }
    
    /// Validator used to check a fully constructoed `RequestResponse` for errors
    var responseValidator: ResponseValidator<ResponseBody, ResponseError> { get }
    
    /// Interval before the `RequestManager` times out.
    var timeoutInterval: TimeInterval { get }
}
